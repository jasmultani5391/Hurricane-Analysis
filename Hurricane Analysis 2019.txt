# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

def float_to_string(parameter):
  x = []
  for i in parameter:
    i = str(i)
    x.append(i)
  return x
string_years = float_to_string(years)

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]


# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:

def x_damages(num):
  updated_damages = []
  for i in num: 
    if 'Damages not recorded' in i:
      i = i.replace('Damages not recorded', '0')
      updated_damages.append(i)
    if 'Damages not recorded' not in i:
      if ('M' in i) and ('.' not in i):
        i = i.replace('M', '000000')
        updated_damages.append(i)
      if ('M' in i) and ('.' in i):
        i = i.replace('.', '')
        i = i.replace('M', '00000')
        updated_damages.append(i)
      if ('B' in i) and ('.' not in i):
        i = i.replace('B', '000000')
        updated_damages.append(i)
      if ('B' in i) and ('.' in i):
        i = i.replace('.', '')
        i = i.replace('B', '00000000')
        updated_damages.append(i)
  return float(updated_damages)



def string_to_float(param):
  x = []
  for i in param:
    i = float(i)
    x.append(i)
  return x

float_damages = x_damages(damages)



# write your construct hurricane dictionary function here:


def final_dict(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths):
  dictionary = {}
  for i in range(len(names)):
    dictionary[i] = {"Names" : names[i], "Months": months[i], "Years": string_years[i], "Max Sustained Wind": max_sustained_winds[i], "Areas Affected": areas_affected[i], "Damage": float_damages[i], "Deaths": deaths[i] }
  return dictionary

MainDictionary = final_dict(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
# write your construct hurricane by year dictionary function here: >?!?!??!!?!??!

def sort_by_year(parameter):
  hurricanes_by_year = dict()
  for i in parameter:
    YearKey = parameter[i]['Years']
    YearVal = parameter[i]
    if YearKey not in hurricanes_by_year:
      hurricanes_by_year[YearKey] = [YearVal]
    else: hurricanes_by_year[YearKey].append(YearVal)
  return hurricanes_by_year

hurricanes_by_year = sort_by_year(MainDictionary)
print(hurricanes_by_year)

# write your count affected areas function here:
def counting_areas(parameter):
  recurring = []
  unique_keys = []
  for i in parameter:
    for ii in i:
      recurring.append(ii)
      if ii not in unique_keys:
        unique_keys.append(ii)
  return recurring, unique_keys
recurring, unique_keys = counting_areas(areas_affected)


def finalcount(parameter):
  area_dictionary = {}
  for i in parameter:
    area_dictionary[i] = parameter.count(i)
  return area_dictionary

area_dictionary = finalcount(recurring)
print(area_dictionary)


# write your find most affected area function here:
def mosthurt_area(parameter):
  highestval = 0
  for i,ii in parameter.items():
    if ii > highestval:
      highestval = ii
      highestkey = i
  return highestkey, highestval

print(mosthurt_area(area_dictionary))

# write your greatest number of deaths function here:
deaths_dict = dict(zip(names, deaths))
print(deaths_dict)
def mosthurt_deaths(parameter):
  highestdeaths = 0
  for i,ii in parameter.items():
    if ii > highestdeaths:
      highestdeaths = ii
      hurricane = i
  return hurricane, highestdeaths

print(mosthurt_deaths(deaths_dict))



# write your catgeorize by mortality function here:


# write your greatest damage function here:

def neutral_updated_damages(param):
  neutralupd_damages = []
  for i in param:
    if "Damages not recorded" in i:
      i = i.replace("Damages not recorded", "0")
      neutralupd_damages.append(i)
    if "Damages not recorded" not in i:
      neutralupd_damages.append(i)
  return neutralupd_damages
neutralupd_damages = (neutral_updated_damages(updated_damages))


float_damages = string_to_float(neutralupd_damages)
damages_dict = dict(zip(names, float_damages))


def most_damages(parameter):
  highestdamages = 0
  for i,ii in parameter.items():
    if ii > highestdamages:
      highestdamages = ii
      hurricane = i
  return hurricane, highestdamages

hurricane, highestdamages = most_damages(damages_dict)
print(hurricane, highestdamages)


# write your catgeorize by damage function here:

def hurricane_category(param):
  hurricanes_by_damage = {'Damages Not Recorded':[], 1:[], 2:[], 3:[], 4:[], 5:[]}
  for i, ii in param.items():
    if (ii == 0):
      hurricanes_by_damage['Damages Not Recorded'].append(i)
    if (ii > 0) and (ii < 100000000):
      hurricanes_by_damage[1].append(i)
    if (ii > 100000000) and (ii < 1000000000):
      hurricanes_by_damage[2].append(i)
    if (ii > 1000000000) and (ii < 10000000000):
      hurricanes_by_damage[3].append(i)
    if (ii > 10000000000) and (ii < 50000000000):
      hurricanes_by_damage[4].append(i)
    if ii > 50000000000:
      hurricanes_by_damage[5].append(i)
  return hurricanes_by_damage

hurricanes_by_damage = hurricane_category(damages_dict)
print(hurricanes_by_damage)




